config = require("../../config.json");
var pg = require('pg');
var conString = config.postgres;

//Lowers timeout time, to close client connection sooner, this may cause problems
//in the long run as queries to the database take a longer time
//but for now, while running tests this needs to be short

//without this being set pg.defaults to 30 clients running and a timeout time for
//each client of 30s (30000)
pg.defaults.poolIdleTimeout = 10000;
/** Timesheet Controller
 * This will handle creating and retrieving timesheets from pg
 *
 */

/* Data Structure
{
    "timesheet_id": "probably some UUID number",
    "user_foreignkey": "foreign key ID for user, should that be DB generated or generated by the application?",
    "service_duration": "duration of service",
    "service_description": "description of service",
    "engagement_number": "foreign key ID of customer"
}
*/
//May want to look into implementing prepared queires
// as seen at https://github.com/brianc/node-postgres/wiki/Prepared-Statements


function createTimesheet(data, callback) {
    //connect to database
    //split up data
    //add data to database
    //handle error and error like things
    //return a true or false if it succeeded
    //client.end() should not be called from a connection pool
    var bool;

    pg.connect(conString, function(err, client, done) {
        if (err) {
            done();
            console.log(
                'error fetching client from pool in Timesheet controller',
                err);
            callback(err, false);
        } else {
            data.forEach(function(row) {
                queryString =
                    "INSERT INTO Timesheets(timesheet_id, user_foreignkey, service_duration, service_description, engagement_number) VALUES($1, $2, $3, $4, $5)";
                //Asynchronously insert data into the database

                timesheet = [row.timesheet_id, row.user_foreinkeyid,
                    row.service_duration, row.service_description,
                    row.engagement_number
                ];
                client.query(queryString, timesheet, function(
                    err, result) {
                    done();
                    if (err) {
                        console.error(
                            'error inserting query into timesheet',
                            err);
                        bool = false;
                        callback(err, bool);

                    } else {
                        console.log(
                            "Timesheet succesfully entered  "
                        );
                        bool = true;
                        callback(err, bool);
                    }

                    ////client.end();
                });
            });
        }

    });

}

function getTimesheet(callback) {
    //connect to database
    //find user that they are requesting for
    //put date and user information in json
    //return err, true, and the query object back
    pg.connect(conString, function(err, client, done) {
        if (err) {
            //client.end();
            done();
            return console.error(
                'error fetching client from pool in Timesheet controller',
                err);
        } else {
            //currently grabs all the timesheets from the database, I should
            //eventually have this grab only one users set of Timesheets
            queryString = "SELECT * FROM Timesheets";
            client.query(queryString, function(err, result) {
                done();
                if (err) {
                    //client.end();
                    console.error(
                        'error getting query from timesheet',
                        err);
                    callback(err, false);
                } else {
                    //client.end();
                    console.log(
                        "Timesheet succesfully selected");
                    callback(err, true, result);
                }
            });
        }
    });
}

function deleteTimesheet(data, callback) {
    //send in array or single int if not skip over all of this stuff
    if (!Array.isArray(deleteArrays) && typeof deleteArrays !== "number") {
        console.log("expected an array or number and got " + typeof data);
        callback(null, false);
    } else {

        pg.connect(conString, function(err, client, done) {
            if (err) {
                //client.end();
                done();
                return console.error(
                    'error fetching client from pool in Timesheet controller',
                    err);
            } else {
                data.forEach(function(index) {
                    queryString = "";
                    client.query(
                        "DELETE FROM timesheets WHERE index=$1", [
                            index
                        ],
                        function(err, result) {
                            done();
                            if (err) {
                                console.error(
                                    'error inserting query into timesheet',
                                    err);
                                callback(err, false, result);
                            } else {
                                console.log(
                                    "Timesheet succesfully entered  "
                                );
                                callback(err, true, result);
                            }
                        });
                });
            }
        });
    }
}

function updateTimesheetRow() {

}

function databaseConnect() {
    //is it useful to abstract out this database connection?
    //I've thought about this several time, but it doesn't make sense to me,
    //pg.connect() abstracts out all the really heavy work and the callback that
    //is passed there handles all the business logic. I can't see myself abstracting
    //oneline and then implement a slightly similar one line throughout all of my
    //code
}

var helper = function() {
    return {
        validateData: function() {

        },
        someOther: function() {

        }
    };
};
//
// /* TEST IMPLEMENTATION */
// //Running some tests
// //these tests should be move to mocha as soon as possible
// function createTimesheetData(rowsInTimesheets){
//     var id = Math.floor(Math.random()*15000);
//     var timesheetRow = function(){
//         return {
//             "timesheet_id": id,
//             "user_foreignkey": 1,
//             "service_duration": (Math.floor(Math.random()*12)),
//             "service_description": "description of service",
//             "engagement_number": (Math.floor(Math.random()*100000))
//         };
//     };
//     var timesheet = [];
//     for (i=0; i<rowsInTimesheets; i++){
//         timesheet.push(timesheetRow());
//     }
//     return timesheet;
// }
//
// var exampleTimesheet = createTimesheetData(10);
//
// // createTimesheet(exampleTimesheet, function(err, bool){
// //     console.log("CREATE");
// //     if(err){
// //         console.error("Oh no!", err);
// //     } else {
// //         console.log("timesheet entered?: "+ bool);
// //     }
// // });
// //
// var baz = setTimeout(getTimesheet(function(err, bool, result){
//     console.log("GET");
//     if (err) {
//         console.error("Error: ", err);
//     } else {
//         console.log("Returned bool: ", bool);
//         console.log(result);
//     }
// }), 5000);
//
// baz.
//
// deleteArrays = Array.apply(0, Array(50)).map(function (x, y) { return y + 1; });
// //deleteArrays = 9;
//
// //console.log("Is Array? " + (!Array.isArray(deleteArrays) && typeof deleteArrays !== "number"));
// deleteTimesheet(deleteArrays, function(err, bool, result){
//     console.error("Error delete timesheet", err);
//     console.log("Delete operation succeeded? " + bool);
//     console.log(result);
// });
